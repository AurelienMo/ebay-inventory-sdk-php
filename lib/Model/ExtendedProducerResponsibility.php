<?php
/**
 * ExtendedProducerResponsibility
 *
 * PHP version 5
 *
 * @category Class
 * @package  EBay\Inventory
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Inventory API
 *
 * The Inventory API is used to create and manage inventory, and then to publish and manage this inventory on an eBay marketplace. There are also methods in this API that will convert eligible, active eBay listings into the Inventory API model.
 *
 * OpenAPI spec version: 1.16.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.33
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace EBay\Inventory\Model;

use ArrayAccess;
use EBay\Inventory\ObjectSerializer;

/**
 * ExtendedProducerResponsibility Class Doc Comment
 *
 * @category Class
 * @description This type provides IDs for the producer or importer related to the new item, packaging, added documentation, or an eco-participation fee. In some markets, such as in France, this may be the importer of the item.
 * @package  EBay\Inventory
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ExtendedProducerResponsibility implements ModelInterface, ArrayAccess
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'ExtendedProducerResponsibility';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes
        = [
            'producerProductId'      => 'string',
            'productPackageId'       => 'string',
            'shipmentPackageId'      => 'string',
            'productDocumentationId' => 'string',
            'ecoParticipationFee'    => Amount::class,
        ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats
        = [
            'producerProductId'      => null,
            'productPackageId'       => null,
            'shipmentPackageId'      => null,
            'productDocumentationId' => null,
            'ecoParticipationFee'    => null,
        ];
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap
        = [
            'producerProductId'      => 'producerProductId',
            'productPackageId'       => 'productPackageId',
            'shipmentPackageId'      => 'shipmentPackageId',
            'productDocumentationId' => 'productDocumentationId',
            'ecoParticipationFee'    => 'ecoParticipationFee',
        ];
    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters
        = [
            'producerProductId'      => 'setProducerProductId',
            'productPackageId'       => 'setProductPackageId',
            'shipmentPackageId'      => 'setShipmentPackageId',
            'productDocumentationId' => 'setProductDocumentationId',
            'ecoParticipationFee'    => 'setEcoParticipationFee',
        ];
    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters
        = [
            'producerProductId'      => 'getProducerProductId',
            'productPackageId'       => 'getProductPackageId',
            'shipmentPackageId'      => 'getShipmentPackageId',
            'productDocumentationId' => 'getProductDocumentationId',
            'ecoParticipationFee'    => 'getEcoParticipationFee',
        ];
    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param  mixed[]  $data  Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['producerProductId'] = $data['producerProductId'] ?? null;
        $this->container['productPackageId'] = $data['productPackageId'] ?? null;
        $this->container['shipmentPackageId'] = $data['shipmentPackageId'] ?? null;
        $this->container['productDocumentationId'] = $data['productDocumentationId'] ?? null;
        $this->container['ecoParticipationFee'] = $data['ecoParticipationFee'] ?? null;
    }

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Gets producerProductId
     *
     * @return string
     */
    public function getProducerProductId()
    {
        return $this->container['producerProductId'];
    }

    /**
     * Sets producerProductId
     *
     * @param  string  $producerProductId  This ID is the Unique Identifier of the producer related to the item. For instance, if the seller is selling a cell phone, it is the ID related to the cell phone.
     *
     * @return $this
     */
    public function setProducerProductId($producerProductId)
    {
        $this->container['producerProductId'] = $producerProductId;

        return $this;
    }

    /**
     * Gets productPackageId
     *
     * @return string
     */
    public function getProductPackageId()
    {
        return $this->container['productPackageId'];
    }

    /**
     * Sets productPackageId
     *
     * @param  string  $productPackageId  The Unique ID of the producer of any packaging related to the product added by the seller. This does not include package in which the product is shipped (see <strong>ShipmentPackageID</strong>). For instance, if the seller adds bubble wrap, it is the ID related to the bubble wrap.
     *
     * @return $this
     */
    public function setProductPackageId($productPackageId)
    {
        $this->container['productPackageId'] = $productPackageId;

        return $this;
    }

    /**
     * Gets shipmentPackageId
     *
     * @return string
     */
    public function getShipmentPackageId()
    {
        return $this->container['shipmentPackageId'];
    }

    /**
     * Sets shipmentPackageId
     *
     * @param  string  $shipmentPackageId  This ID is the Unique Identifier of the producer of any packaging used by the seller to ship the item. This does not include non-shipping packaging added to the product (see <strong>ProductPackageID</strong>). This ID is required when the seller uses packaging to ship the item. For instance, if the seller uses a different box to ship the item, it is the ID related to the box.
     *
     * @return $this
     */
    public function setShipmentPackageId($shipmentPackageId)
    {
        $this->container['shipmentPackageId'] = $shipmentPackageId;

        return $this;
    }

    /**
     * Gets productDocumentationId
     *
     * @return string
     */
    public function getProductDocumentationId()
    {
        return $this->container['productDocumentationId'];
    }

    /**
     * Sets productDocumentationId
     *
     * @param  string  $productDocumentationId  This ID is the Unique Identifier of the producer of any paper added to the parcel of the item by the seller. For example, this ID concerns any notice, leaflet, or paper that the seller adds to a cell phone parcel.
     *
     * @return $this
     */
    public function setProductDocumentationId($productDocumentationId)
    {
        $this->container['productDocumentationId'] = $productDocumentationId;

        return $this;
    }

    /**
     * Gets ecoParticipationFee
     *
     * @return Amount
     */
    public function getEcoParticipationFee()
    {
        return $this->container['ecoParticipationFee'];
    }

    /**
     * Sets ecoParticipationFee
     *
     * @param  Amount  $ecoParticipationFee  ecoParticipationFee
     *
     * @return $this
     */
    public function setEcoParticipationFee($ecoParticipationFee)
    {
        $this->container['ecoParticipationFee'] = $ecoParticipationFee;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  integer  $offset  Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  integer  $offset  Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  integer  $offset  Offset
     * @param  mixed  $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  integer  $offset  Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
