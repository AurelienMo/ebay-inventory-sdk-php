<?php
/**
 * EbayOfferDetailsWithAll
 *
 * PHP version 5
 *
 * @category Class
 * @package  EBay\Inventory
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Inventory API
 *
 * The Inventory API is used to create and manage inventory, and then to publish and manage this inventory on an eBay marketplace. There are also methods in this API that will convert eligible, active eBay listings into the Inventory API model.
 *
 * OpenAPI spec version: 1.16.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.33
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace EBay\Inventory\Model;

use ArrayAccess;
use EBay\Inventory\ObjectSerializer;

/**
 * EbayOfferDetailsWithAll Class Doc Comment
 *
 * @category Class
 * @description This type provides details of an offer, and is used by the response payloads of the &lt;strong&gt;getOffer&lt;/strong&gt; and the &lt;strong&gt;getOffers&lt;/strong&gt; calls.
 * @package  EBay\Inventory
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EbayOfferDetailsWithAll implements ModelInterface, ArrayAccess
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'EbayOfferDetailsWithAll';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes
        = [
            'availableQuantity'              => 'int',
            'categoryId'                     => 'string',
            'charity'                        => Charity::class,
            'extendedProducerResponsibility' => ExtendedProducerResponsibility::class,
            'format'                         => 'string',
            'hideBuyerDetails'               => 'bool',
            'includeCatalogProductDetails'   => 'bool',
            'listing'                        => ListingDetails::class,
            'listingDescription'             => 'string',
            'listingDuration'                => 'string',
            'listingPolicies'                => ListingPolicies::class,
            'listingStartDate'               => 'string',
            'lotSize'                        => 'int',
            'marketplaceId'                  => 'string',
            'merchantLocationKey'            => 'string',
            'offerId'                        => 'string',
            'pricingSummary'                 => PricingSummary::class,
            'quantityLimitPerBuyer'          => 'int',
            'secondaryCategoryId'            => 'string',
            'sku'                            => 'string',
            'status'                         => 'string',
            'storeCategoryNames'             => 'string[]',
            'tax'                            => Tax::class,
        ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats
        = [
            'availableQuantity'              => 'int32',
            'categoryId'                     => null,
            'charity'                        => null,
            'extendedProducerResponsibility' => null,
            'format'                         => null,
            'hideBuyerDetails'               => null,
            'includeCatalogProductDetails'   => null,
            'listing'                        => null,
            'listingDescription'             => null,
            'listingDuration'                => null,
            'listingPolicies'                => null,
            'listingStartDate'               => null,
            'lotSize'                        => 'int32',
            'marketplaceId'                  => null,
            'merchantLocationKey'            => null,
            'offerId'                        => null,
            'pricingSummary'                 => null,
            'quantityLimitPerBuyer'          => 'int32',
            'secondaryCategoryId'            => null,
            'sku'                            => null,
            'status'                         => null,
            'storeCategoryNames'             => null,
            'tax'                            => null,
        ];
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap
        = [
            'availableQuantity'              => 'availableQuantity',
            'categoryId'                     => 'categoryId',
            'charity'                        => 'charity',
            'extendedProducerResponsibility' => 'extendedProducerResponsibility',
            'format'                         => 'format',
            'hideBuyerDetails'               => 'hideBuyerDetails',
            'includeCatalogProductDetails'   => 'includeCatalogProductDetails',
            'listing'                        => 'listing',
            'listingDescription'             => 'listingDescription',
            'listingDuration'                => 'listingDuration',
            'listingPolicies'                => 'listingPolicies',
            'listingStartDate'               => 'listingStartDate',
            'lotSize'                        => 'lotSize',
            'marketplaceId'                  => 'marketplaceId',
            'merchantLocationKey'            => 'merchantLocationKey',
            'offerId'                        => 'offerId',
            'pricingSummary'                 => 'pricingSummary',
            'quantityLimitPerBuyer'          => 'quantityLimitPerBuyer',
            'secondaryCategoryId'            => 'secondaryCategoryId',
            'sku'                            => 'sku',
            'status'                         => 'status',
            'storeCategoryNames'             => 'storeCategoryNames',
            'tax'                            => 'tax',
        ];
    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters
        = [
            'availableQuantity'              => 'setAvailableQuantity',
            'categoryId'                     => 'setCategoryId',
            'charity'                        => 'setCharity',
            'extendedProducerResponsibility' => 'setExtendedProducerResponsibility',
            'format'                         => 'setFormat',
            'hideBuyerDetails'               => 'setHideBuyerDetails',
            'includeCatalogProductDetails'   => 'setIncludeCatalogProductDetails',
            'listing'                        => 'setListing',
            'listingDescription'             => 'setListingDescription',
            'listingDuration'                => 'setListingDuration',
            'listingPolicies'                => 'setListingPolicies',
            'listingStartDate'               => 'setListingStartDate',
            'lotSize'                        => 'setLotSize',
            'marketplaceId'                  => 'setMarketplaceId',
            'merchantLocationKey'            => 'setMerchantLocationKey',
            'offerId'                        => 'setOfferId',
            'pricingSummary'                 => 'setPricingSummary',
            'quantityLimitPerBuyer'          => 'setQuantityLimitPerBuyer',
            'secondaryCategoryId'            => 'setSecondaryCategoryId',
            'sku'                            => 'setSku',
            'status'                         => 'setStatus',
            'storeCategoryNames'             => 'setStoreCategoryNames',
            'tax'                            => 'setTax',
        ];
    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters
        = [
            'availableQuantity'              => 'getAvailableQuantity',
            'categoryId'                     => 'getCategoryId',
            'charity'                        => 'getCharity',
            'extendedProducerResponsibility' => 'getExtendedProducerResponsibility',
            'format'                         => 'getFormat',
            'hideBuyerDetails'               => 'getHideBuyerDetails',
            'includeCatalogProductDetails'   => 'getIncludeCatalogProductDetails',
            'listing'                        => 'getListing',
            'listingDescription'             => 'getListingDescription',
            'listingDuration'                => 'getListingDuration',
            'listingPolicies'                => 'getListingPolicies',
            'listingStartDate'               => 'getListingStartDate',
            'lotSize'                        => 'getLotSize',
            'marketplaceId'                  => 'getMarketplaceId',
            'merchantLocationKey'            => 'getMerchantLocationKey',
            'offerId'                        => 'getOfferId',
            'pricingSummary'                 => 'getPricingSummary',
            'quantityLimitPerBuyer'          => 'getQuantityLimitPerBuyer',
            'secondaryCategoryId'            => 'getSecondaryCategoryId',
            'sku'                            => 'getSku',
            'status'                         => 'getStatus',
            'storeCategoryNames'             => 'getStoreCategoryNames',
            'tax'                            => 'getTax',
        ];
    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param  mixed[]  $data  Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['availableQuantity'] = $data['availableQuantity'] ?? null;
        $this->container['categoryId'] = $data['categoryId'] ?? null;
        $this->container['charity'] = $data['charity'] ?? null;
        $this->container['extendedProducerResponsibility'] = $data['extendedProducerResponsibility'] ?? null;
        $this->container['format'] = $data['format'] ?? null;
        $this->container['hideBuyerDetails'] = $data['hideBuyerDetails'] ?? null;
        $this->container['includeCatalogProductDetails'] = $data['includeCatalogProductDetails'] ?? null;
        $this->container['listing'] = $data['listing'] ?? null;
        $this->container['listingDescription'] = $data['listingDescription'] ?? null;
        $this->container['listingDuration'] = $data['listingDuration'] ?? null;
        $this->container['listingPolicies'] = $data['listingPolicies'] ?? null;
        $this->container['listingStartDate'] = $data['listingStartDate'] ?? null;
        $this->container['lotSize'] = $data['lotSize'] ?? null;
        $this->container['marketplaceId'] = $data['marketplaceId'] ?? null;
        $this->container['merchantLocationKey'] = $data['merchantLocationKey'] ?? null;
        $this->container['offerId'] = $data['offerId'] ?? null;
        $this->container['pricingSummary'] = $data['pricingSummary'] ?? null;
        $this->container['quantityLimitPerBuyer'] = $data['quantityLimitPerBuyer'] ?? null;
        $this->container['secondaryCategoryId'] = $data['secondaryCategoryId'] ?? null;
        $this->container['sku'] = $data['sku'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['storeCategoryNames'] = $data['storeCategoryNames'] ?? null;
        $this->container['tax'] = $data['tax'] ?? null;
    }

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Gets availableQuantity
     *
     * @return int
     */
    public function getAvailableQuantity()
    {
        return $this->container['availableQuantity'];
    }

    /**
     * Sets availableQuantity
     *
     * @param  int  $availableQuantity  This integer value indicates the quantity of the inventory item (specified by the <strong>sku</strong> value) that will be available for purchase by buyers shopping on the eBay site specified in the <strong>marketplaceId</strong> field. For unpublished offers where the available quantity has yet to be set, the <strong>availableQuantity</strong> value is set to <code>0</code>.
     *
     * @return $this
     */
    public function setAvailableQuantity($availableQuantity)
    {
        $this->container['availableQuantity'] = $availableQuantity;

        return $this;
    }

    /**
     * Gets categoryId
     *
     * @return string
     */
    public function getCategoryId()
    {
        return $this->container['categoryId'];
    }

    /**
     * Sets categoryId
     *
     * @param  string  $categoryId  The unique identifier of the primary eBay category that the inventory item is listed under. This field is always returned for published offers, but is only returned if set for unpublished offers.
     *
     * @return $this
     */
    public function setCategoryId($categoryId)
    {
        $this->container['categoryId'] = $categoryId;

        return $this;
    }

    /**
     * Gets charity
     *
     * @return Charity
     */
    public function getCharity()
    {
        return $this->container['charity'];
    }

    /**
     * Sets charity
     *
     * @param  Charity  $charity  charity
     *
     * @return $this
     */
    public function setCharity($charity)
    {
        $this->container['charity'] = $charity;

        return $this;
    }

    /**
     * Gets extendedProducerResponsibility
     *
     * @return ExtendedProducerResponsibility
     */
    public function getExtendedProducerResponsibility()
    {
        return $this->container['extendedProducerResponsibility'];
    }

    /**
     * Sets extendedProducerResponsibility
     *
     * @param  ExtendedProducerResponsibility  $extendedProducerResponsibility  extendedProducerResponsibility
     *
     * @return $this
     */
    public function setExtendedProducerResponsibility($extendedProducerResponsibility)
    {
        $this->container['extendedProducerResponsibility'] = $extendedProducerResponsibility;

        return $this;
    }

    /**
     * Gets format
     *
     * @return string
     */
    public function getFormat()
    {
        return $this->container['format'];
    }

    /**
     * Sets format
     *
     * @param  string  $format  This enumerated value indicates the listing format of the offer. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/inventory/types/slr:FormatTypeEnum'>eBay API documentation</a>
     *
     * @return $this
     */
    public function setFormat($format)
    {
        $this->container['format'] = $format;

        return $this;
    }

    /**
     * Gets hideBuyerDetails
     *
     * @return bool
     */
    public function getHideBuyerDetails()
    {
        return $this->container['hideBuyerDetails'];
    }

    /**
     * Sets hideBuyerDetails
     *
     * @param  bool  $hideBuyerDetails  This field is returned as <code>true</code> if the private listing feature has been enabled for the offer. Sellers may want to use this feature when they believe that a listing's potential bidders/buyers would not want their obfuscated user IDs (and feedback scores) exposed to other users. <br><br> This field is always returned even if not explicitly set in the offer. It defaults to <code>false</code>, so will get returned as <code>false</code> if seller does not set this feature with a 'Create' or 'Update' offer method.
     *
     * @return $this
     */
    public function setHideBuyerDetails($hideBuyerDetails)
    {
        $this->container['hideBuyerDetails'] = $hideBuyerDetails;

        return $this;
    }

    /**
     * Gets includeCatalogProductDetails
     *
     * @return bool
     */
    public function getIncludeCatalogProductDetails()
    {
        return $this->container['includeCatalogProductDetails'];
    }

    /**
     * Sets includeCatalogProductDetails
     *
     * @param  bool  $includeCatalogProductDetails  This field indicates whether or not eBay product catalog details are applied to a listing. A value of <code>true</code> indicates the listing corresponds to the eBay product associated with the provided product identifier. The product identifier is provided in <strong>createOrReplaceInventoryItem</strong>.<p><span class=\"tablenote\"><strong>Note:</strong> Though the <strong>includeCatalogProductDetails</strong> parameter is not required to be submitted in the request, the parameter defaults to 'true' if omitted.</span></p>
     *
     * @return $this
     */
    public function setIncludeCatalogProductDetails($includeCatalogProductDetails)
    {
        $this->container['includeCatalogProductDetails'] = $includeCatalogProductDetails;

        return $this;
    }

    /**
     * Gets listing
     *
     * @return ListingDetails
     */
    public function getListing()
    {
        return $this->container['listing'];
    }

    /**
     * Sets listing
     *
     * @param  ListingDetails  $listing  listing
     *
     * @return $this
     */
    public function setListing($listing)
    {
        $this->container['listing'] = $listing;

        return $this;
    }

    /**
     * Gets listingDescription
     *
     * @return string
     */
    public function getListingDescription()
    {
        return $this->container['listingDescription'];
    }

    /**
     * Sets listingDescription
     *
     * @param  string  $listingDescription  The description of the eBay listing that is part of the unpublished or published offer. This field is always returned for published offers, but is only returned if set for unpublished offers.<br/><br/><strong>Max Length</strong>: 500000 (which includes HTML markup/tags)
     *
     * @return $this
     */
    public function setListingDescription($listingDescription)
    {
        $this->container['listingDescription'] = $listingDescription;

        return $this;
    }

    /**
     * Gets listingDuration
     *
     * @return string
     */
    public function getListingDuration()
    {
        return $this->container['listingDuration'];
    }

    /**
     * Sets listingDuration
     *
     * @param  string  $listingDuration  This field indicates the number of days that the listing will be active.<br /><br />This field is returned for both auction and fixed-price listings; however, the value returned for fixed-price listings will always be <code>GTC</code>. The GTC (Good 'Til Cancelled) listings are automatically renewed each calendar month until the seller decides to end the listing.<br /><br /><span class=\"tablenote\"> <strong>Note:</strong> If the listing duration expires for an auction offer, the listing then becomes available as a fixed-price offer and will be GTC.</span> For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/inventory/types/slr:ListingDurationEnum'>eBay API documentation</a>
     *
     * @return $this
     */
    public function setListingDuration($listingDuration)
    {
        $this->container['listingDuration'] = $listingDuration;

        return $this;
    }

    /**
     * Gets listingPolicies
     *
     * @return ListingPolicies
     */
    public function getListingPolicies()
    {
        return $this->container['listingPolicies'];
    }

    /**
     * Sets listingPolicies
     *
     * @param  ListingPolicies  $listingPolicies  listingPolicies
     *
     * @return $this
     */
    public function setListingPolicies($listingPolicies)
    {
        $this->container['listingPolicies'] = $listingPolicies;

        return $this;
    }

    /**
     * Gets listingStartDate
     *
     * @return string
     */
    public function getListingStartDate()
    {
        return $this->container['listingStartDate'];
    }

    /**
     * Sets listingStartDate
     *
     * @param  string  $listingStartDate  This timestamp is the date/time that the seller set for the scheduled listing. With the scheduled listing feature, the seller can set a time in the future that the listing will become active, instead of the listing becoming active immediately after a <strong>publishOffer</strong> call. <br><br> Scheduled listings do not always start at the exact date/time specified by the seller, but the date/time of the timestamp returned in <strong>getOffer</strong>/<strong>getOffers</strong> will be the same as the timestamp passed into a 'Create' or 'Update' offer call. <br><br> This field is returned if set for an offer.
     *
     * @return $this
     */
    public function setListingStartDate($listingStartDate)
    {
        $this->container['listingStartDate'] = $listingStartDate;

        return $this;
    }

    /**
     * Gets lotSize
     *
     * @return int
     */
    public function getLotSize()
    {
        return $this->container['lotSize'];
    }

    /**
     * Sets lotSize
     *
     * @param  int  $lotSize  This field is only applicable and returned if the listing is a lot listing. A lot listing is a listing that has multiple quantity of the same product. An example would be a set of four identical car tires. The integer value in this field is the number of identical items being sold through the lot listing.
     *
     * @return $this
     */
    public function setLotSize($lotSize)
    {
        $this->container['lotSize'] = $lotSize;

        return $this;
    }

    /**
     * Gets marketplaceId
     *
     * @return string
     */
    public function getMarketplaceId()
    {
        return $this->container['marketplaceId'];
    }

    /**
     * Sets marketplaceId
     *
     * @param  string  $marketplaceId  This enumeration value is the unique identifier of the eBay site on which the offer is available, or will be made available. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/inventory/types/slr:MarketplaceEnum'>eBay API documentation</a>
     *
     * @return $this
     */
    public function setMarketplaceId($marketplaceId)
    {
        $this->container['marketplaceId'] = $marketplaceId;

        return $this;
    }

    /**
     * Gets merchantLocationKey
     *
     * @return string
     */
    public function getMerchantLocationKey()
    {
        return $this->container['merchantLocationKey'];
    }

    /**
     * Sets merchantLocationKey
     *
     * @param  string  $merchantLocationKey  The unique identifier of the inventory location. This identifier is set up by the merchant when the inventory location is first created with the <strong>createInventoryLocation</strong> call. Once this value is set for an inventory location, it can not be modified. To get more information about this inventory location, the <strong>getInventoryLocation</strong> call can be used, passing in this value at the end of the call URI.<br/><br/>This field is always returned for published offers, but is only returned if set for unpublished offers.<br/><br/><b>Max length</b>: 36
     *
     * @return $this
     */
    public function setMerchantLocationKey($merchantLocationKey)
    {
        $this->container['merchantLocationKey'] = $merchantLocationKey;

        return $this;
    }

    /**
     * Gets offerId
     *
     * @return string
     */
    public function getOfferId()
    {
        return $this->container['offerId'];
    }

    /**
     * Sets offerId
     *
     * @param  string  $offerId  The unique identifier of the offer. This identifier is used in many offer-related calls, and it is also used in the <strong>bulkUpdatePriceQuantity</strong> call.
     *
     * @return $this
     */
    public function setOfferId($offerId)
    {
        $this->container['offerId'] = $offerId;

        return $this;
    }

    /**
     * Gets pricingSummary
     *
     * @return PricingSummary
     */
    public function getPricingSummary()
    {
        return $this->container['pricingSummary'];
    }

    /**
     * Sets pricingSummary
     *
     * @param  PricingSummary  $pricingSummary  pricingSummary
     *
     * @return $this
     */
    public function setPricingSummary($pricingSummary)
    {
        $this->container['pricingSummary'] = $pricingSummary;

        return $this;
    }

    /**
     * Gets quantityLimitPerBuyer
     *
     * @return int
     */
    public function getQuantityLimitPerBuyer()
    {
        return $this->container['quantityLimitPerBuyer'];
    }

    /**
     * Sets quantityLimitPerBuyer
     *
     * @param  int  $quantityLimitPerBuyer  This field is only applicable and set if the seller wishes to set a restriction on the purchase quantity of an inventory item per seller. If this field is set by the seller for the offer, then each distinct buyer may purchase up to, but not exceed the quantity in this field. So, if this field's value is <code>5</code>, each buyer may purchase a quantity of the inventory item between one and five, and the purchases can occur in one multiple-quantity purchase, or over multiple transactions. If a buyer attempts to purchase one or more of these products, and the cumulative quantity will take the buyer beyond the quantity limit, that buyer will be blocked from that purchase.<br/>
     *
     * @return $this
     */
    public function setQuantityLimitPerBuyer($quantityLimitPerBuyer)
    {
        $this->container['quantityLimitPerBuyer'] = $quantityLimitPerBuyer;

        return $this;
    }

    /**
     * Gets secondaryCategoryId
     *
     * @return string
     */
    public function getSecondaryCategoryId()
    {
        return $this->container['secondaryCategoryId'];
    }

    /**
     * Sets secondaryCategoryId
     *
     * @param  string  $secondaryCategoryId  The unique identifier for a secondary category. This field is applicable if the seller decides to list the item under two categories. Sellers can use the <a href=\"/api-docs/commerce/taxonomy/resources/category_tree/methods/getCategorySuggestions\" target=\"_blank\">getCategorySuggestions</a> method of the Taxonomy API to retrieve suggested category ID values. A fee may be charged when adding a secondary category to a listing. <br/><br/><span class=\"tablenote\"><strong>Note:</strong> You cannot list <strong>US eBay Motors</strong> vehicles in two categories. However, you can list <strong>Parts & Accessories</strong> in two categories.</span>
     *
     * @return $this
     */
    public function setSecondaryCategoryId($secondaryCategoryId)
    {
        $this->container['secondaryCategoryId'] = $secondaryCategoryId;

        return $this;
    }

    /**
     * Gets sku
     *
     * @return string
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param  string  $sku  This is the seller-defined SKU value of the product in the offer.<br/><br/><strong>Max Length</strong>: 50 <br/>
     *
     * @return $this
     */
    public function setSku($sku)
    {
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param  string  $status  The enumeration value in this field specifies the status of the offer - either <code>PUBLISHED</code> or <code>UNPUBLISHED</code>. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/inventory/types/slr:OfferStatusEnum'>eBay API documentation</a>
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets storeCategoryNames
     *
     * @return string[]
     */
    public function getStoreCategoryNames()
    {
        return $this->container['storeCategoryNames'];
    }

    /**
     * Sets storeCategoryNames
     *
     * @param  string[]  $storeCategoryNames  This container is returned if the seller chose to place the inventory item into one or two eBay store categories that the seller has set up for their eBay store. The string value(s) in this container will be the full path(s) to the eBay store categories, as shown below:<br> <pre><code>\"storeCategoryNames\": [<br/> \"/Fashion/Men/Shirts\", <br/> \"/Fashion/Men/Accessories\" ], </pre></code>
     *
     * @return $this
     */
    public function setStoreCategoryNames($storeCategoryNames)
    {
        $this->container['storeCategoryNames'] = $storeCategoryNames;

        return $this;
    }

    /**
     * Gets tax
     *
     * @return Tax
     */
    public function getTax()
    {
        return $this->container['tax'];
    }

    /**
     * Sets tax
     *
     * @param  Tax  $tax  tax
     *
     * @return $this
     */
    public function setTax($tax)
    {
        $this->container['tax'] = $tax;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  integer  $offset  Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  integer  $offset  Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  integer  $offset  Offset
     * @param  mixed  $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  integer  $offset  Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
