<?php

namespace SapientPro\EbayInventorySDK\Models;

use SapientPro\EbayInventorySDK\Models\Concerns\FillsModel;
use Symfony\Component\Validator\Constraints as Assert;

/**
 * This type is used to identify the charitable organization associated with the listing,
 * and the percentage of the sale proceeds
 * that the charitable organization will receive for each sale generated by the listing.
 * <br><br>In order to receive a percentage of the sales proceeds,
 * the charitable organization must be registered with the PayPal Giving Fund, which is a partner of eBay for Charity.
 */
class Charity implements EbayModelInterface
{
    use FillsModel;

    /** The eBay-assigned unique identifier of the charitable organization that will receive a percentage of the sales proceeds. The charitable organization must be reqistered with the PayPal Giving Fund in order to receive sales proceeds through eBay listings.<br><br>This field is conditionally required if a seller is planning on donating a percentage of the sale proceeds to a charitable organization.<br><br>The eBay-assigned unique identifier of a charitable organization can be found using the <strong>getCharityOrgs</strong> method of the Charity API. In the <strong>getCharityOrgs</strong> response, this unique identifier is shown in the <a href="/api-docs/commerce/charity/resources/charity_org/methods/getCharityOrgs#response.charityOrgs.charityOrgId" target="_blank">charityOrgId</a> field. */
    #[Assert\Type('string')]
    public ?string $charityId = null;

    /** This field is the percentage of the purchase price that the charitable organization (identified in the <strong>charityId</strong> field) will receive for each sale that the listing generates. This field is conditionally required if a seller is planning on donating a percentage of the sale proceeds to a charitable organization. This numeric value can range from 10 to 100, and in any 5 (percent) increments in between this range (e.g. <code>10</code>, <code>15</code>, <code>20</code>...<code>95</code>,... <code>100</code>). The seller would pass in <code>10</code> for 10 percent, <code>15</code> for 15 percent, <code>20</code> for 20 percent, and so on, all the way to <code>100</code> for 100 percent. */
    #[Assert\Type('string')]
    public ?string $donationPercentage = null;
}
